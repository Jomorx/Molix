@use "sass:map";

@use "mixins/config.scss" as *;
@use "common/var.scss" as *;

@import "./common/var.scss";
$btnPrefix: #{$namespace}-button;
//button基础样式
.#{$btnPrefix}#{$element-separator}btn {
    position: relative;
    overflow: visible;
}
//disabled相关
.is-disabled {
    cursor: not-allowed;
    opacity: 0.6;
}
// round相关
.is-round {
    border-radius: 10px;
}

// 基础样式
.#{$btnPrefix}#{$element-separator}wrapper {
    border-radius: inherit;
    position: relative;
    z-index: 1;
    font-size: 14px;
    // padding: 4px 8px;
    text-align: center;
    display: block;
    text-decoration: none;
    overflow: hidden;
    &::after,
    &::before {
        position: absolute;
        content: "";
        width: 100%;
        height: 100%;
        top: -100%;
        left: 0;
        transition: 0.3s;
        z-index: -1;
        opacity: 0.5;
    }
    &::after {
        opacity: 1;
        transition-delay: 0.15s;
    }
    &:hover {
        color: #fff;
    }
    &:hover::after,
    &:hover::before {
        top: 0px !important;
    }
    //text hover样式
    &:is(.#{$btnPrefix}#{$modifier-separator}text):not(:disabled) {
        border: 3px solid transparent;
        color: black;
        background-color: transparent;
    }
    //text hover样式
    &:is(.#{$btnPrefix}#{$modifier-separator}text):not(:disabled):hover {
        color: rgba(0, 0, 0, 0.88);
        background-color: rgba(0, 0, 0, 0.06);
        transition: color, background-color 0.3s linear;
    }
}
@each $size, $sizeStyle in $btnSize {
    .#{$btnPrefix}--#{$size} {
        padding: map-get($sizeStyle, "padding");
    }
}
.#{$btnPrefix}#{$element-separator}wave {
    position: absolute;
    inset: 0px;
    border-radius: inherit;
    animation-iteration-count: 1;
    animation-duration: 0.6s;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1), cubic-bezier(0, 0, 0.2, 1);
}

//type相关
@each $type, $typeInfo in $types {
    .#{$btnPrefix}#{$modifier-separator}#{$type}:not(.is-fall) {
        color: map-get($typeInfo, "color");
        background-color: map-get($typeInfo, "bgColor");
        border: 2px solid map-get($typeInfo, "bgColor");

        &::after,
        &::before {
            background-color: transparent;
        }
    }
    .#{$btnPrefix}#{$modifier-separator}#{$type} {
        color: map-get($typeInfo, "bgColor");
        border: 2px solid map-get($typeInfo, "bgColor");
        &::after,
        &::before {
            @if $type == "default" {
                background-color: map-get($typeInfo, "color");
            } @else {
                background-color: map-get($typeInfo, "bgColor");
            }
        }
    }

    //wave相关
    .is-#{$type}-wave-active {
        animation-name: #{$type}-button-wave, #{$type}-button-wave-opacity;
    }

    @keyframes #{$type}-button-wave {
        from {
            box-shadow: 0 0 0.5px 0 map-get($typeInfo, "bgColor");
        }
        to {
            // don't use exact 5px since chrome will display the animation with glitches
            box-shadow: 0 0 0.5px 4.5px map-get($typeInfo, "bgColor");
        }
    }

    @keyframes #{$type}-button-wave-opacity {
        from {
            opacity: map-get($typeInfo, "bgColor");
        }
        to {
            opacity: 0;
        }
    }
}
