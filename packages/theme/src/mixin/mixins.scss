@use "./config.scss" as *;
@use "./function.scss" as *;

@mixin b($block) {
    $B: $namespace + "-" + $block !global;

    .#{$B} {
        @content;
    }
}

@mixin e($element) {
    $E: $element !global;
    $selector: &;
    $currentSelector: "";
    @each $unit in $element {
        $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
    }

    @if hitAllSpecialNestRule($selector) {
        @at-root {
            #{$selector} {
                #{$currentSelector} {
                    @content;
                }
            }
        }
    } @else {
        @at-root {
            #{$currentSelector} {
                @content;
            }
        }
    }
}

@mixin m($modifier) {
    $selector: &;
    $currentSelector: "";
    @each $unit in $modifier {
        $currentSelector: #{$currentSelector + $selector + $modifier-separator + $unit + ","};
    }

    @at-root {
        #{$currentSelector} {
            @content;
        }
    }
}

@mixin when($state) {
    @at-root {
        &.#{$state-prefix + $state} {
            @content;
        }
    }
}

// @mixin set-type-css-var($types) {
//     @each $type, $typeInfo in $types {
//         #{$namespace}-type-#{$type}-color: map.get($typeInfo, "color");
//         #{$namespace}-type-#{$type}-bgColor: map.get($typeInfo, "bgColor");
//     }
// }